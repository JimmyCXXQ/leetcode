class Solution {
    // 与最长公共子序列类似
    // 但不同的是最长公共子序列不需要连续 如 abcde ace ，公共子序列不需要连续但是顺序要一致
    // 子数组要求连续
    
    // 解题思路：
    // [1,2,3,2,1]
    // [3,2,1,4,7]
    // 创建一个 n,m矩阵.....由于子数组连续所以判断 nums1[i] == nums2[j]
    // 相等时，只需要往 dp[i-1][j-1] + 1 即可，不管之前是否已经连续
    // 
    // 当i=2,j=0时，才开始连续，其它的 dp[0][0] = 0,dp[1][0] = 0
    //
    // dp[i][j] = nums1[i] == nums2[j] ? dp[i-1][j-1] + 1 or 0 
    // ans = Math(dp[i][j], ans) 记录当前最大的子数组长度
    
    
    public int findLength(int[] nums1, int[] nums2) {
        int n = nums1.length, m = nums2.length;

        int[][] dp = new int[n+1][m+1];
        dp[n][m] = 0;
        int ans = 0;

        for(int i=n-1;i>=0;i--){
            for(int j=m-1;j>=0;j--){
                if(nums1[i] == nums2[j]){
                    dp[i][j] = dp[i+1][j+1] + 1;
                }else{ // 不相等时，此时对应的i, j位置的连续子数组就为 0了
                    dp[i][j] = 0;
                }

                ans = Math.max(ans, dp[i][j]);
            }
        }

        return ans;
    }
}
