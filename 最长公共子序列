class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        // abcde abc 公共子序列不需要连续
        // "ezupkr"
        // "ubmrapg"
        // 解题思路：
        //  创建 n, m 矩阵
        // dp[i][j] = text1.charAt(i) == text2.charAt(j) ? dp[i-1][j-1] + 1 or Math(dp[i - 1][j], dp[i][j - 1])
        // 当 i 位置字符与 j 位置字符相等时，只需要在 i - 1, j - 1的基础上 + 1即可得到 i, j 位置的长度
        // 不相等时，需要判断i - 1 与 到j 位置的最大子序列 以及 i, j - 1位置最大公共子序列
        // 因为要保持顺序一致，所以 i - 1不可以与 j 后面的相等， 故需要得到的是 i - 1与 j 的最大公共子序列
        // i 到 j - 1同理
        //  例如：abcde 与 cbd 对比到 c 与 e, 当已经对比完 b与b 时，dp[1][1] = 1，再对比b 与 d, dp[1][2]
    
        int n = text1.length(), m = text2.length();
        int[][] dp = new int[n + 1][m + 1];
        for(int i=0;i<n;i++){
            dp[i][0] = 0;
        }

        for(int i=0;i<m;i++){
            dp[0][m] = 0;
        }

        int ans = 0;
        for (int i = 1; i < n+1;i++) {
            for (int j = 1; j < m+1; j++) {
                if(text1.charAt(i-1) == text2.charAt(j - 1)){
                    dp[i][j] = dp[i-1][j - 1] + 1;
                }else{
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
}
