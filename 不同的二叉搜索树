class Solution {
    public int numTrees(int n) {
        // 思路: 
        // 以 i 为分割点，i - 1 为左子树, i + 1为右子树
        // 假设 n = 3, i = 1, 左子树为（空树为 1 种） 1 , i + 1 右子树为 2
        // 设 F(i, n) 表示 以 i 节点为分割点, 构建长度为 n 的二叉搜索树
        // G(n) 为 长度为 n 的序列构建不同二叉搜索树的种数
        // F(i, n) = G(i - 1) * G(n - i) 
        // F(1, 3) = G(0) * G(2) = 1 * 2 = 2
        // F(2, 3) = G(1) * G(1) = 1 * 1 = 1
        // F(3, 3) = G(2) * G(0) = 2
        // G(3) = 2 + 1 + 2 = 5 

        int[] dp = new int[n + 1];
        // 因为空树也是一种情况故，dp[0] = 1
        dp[0] = 1;
        dp[1] = 1;

        for(int i=2;i<=n;i++){
            // 因为 dp[i]依赖于 dp[0] ~ dp[n - 1]
            // 故需要 先计算 小于 i 的所有 dp 出来
           for(int j=1;j<=i;j++){
               dp[i] += dp[j - 1] * dp[i - j];
           }
        }

        return dp[n];

    }
}
